buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: false
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath "org.parchmentmc:librarian:1.+"
    }
}

plugins {
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

group = "com.${author}.${modid}"
version = "${minecraft_version}-${mod_version}"
archivesBaseName = modid

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    if (Boolean.parseBoolean(project.use_parchment)) {
        mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    } else {
        mappings channel: 'official', version: "${minecraft_version}"
    }

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan", "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan", "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args "--mod", modid, "--all", "--output", file('src/generated/resources/'), "--existing", file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://maven.tterrag.com/"
        content {
            includeGroup "com.simibubi.create"
            includeGroup "com.jozufozu.flywheel"
            includeGroup "com.tterrag.registrate"
        }
    }

    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    mavenLocal()

}

dependencies {
    implementation 'org.jetbrains:annotations:22.0.0'
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")


    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    implementation fg.deobf("dev.latvian.mods:kubejs-create-forge:${kubejs_create_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}")

    runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_id}")



    if (ct_enabled.toBoolean()) {
        def minecraftVersion= "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
        def ctDep = "com.blamejared.crafttweaker:CraftTweaker-forge-${ct_minecraft_version}:${ct_version}"
        def ctCreateDep = "com.blamejared.crafttweaker:CraftTweaker-forge-${ct_minecraft_version}:${ct_version}"
        compileOnly(ctDep)
        runtimeOnly(fg.deobf(ctDep))

        implementation fg.deobf("com.blamejared.createtweaker:CreateTweaker-1.19.2:${ct_create_version}")
        annotationProcessor 'com.blamejared.crafttweaker:Crafttweaker_Annotation_Processors:3.0.0.10'
        annotationProcessor minecraftVersion
        annotationProcessor ctDep
        annotationProcessor ctCreateDep
    }

    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }

    //annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

compileJava.options.encoding = 'UTF-8'
compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}
jar {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            //    "MixinConfigs"            : "${modid}.mixins.json"
        ])
    }
}
/*if(System.getenv('MODRINTH_TOKEN') != null) {

    modrinth {
        token = System.getenv("MODRINTH_TOKEN")
        projectId = "create-sifting"
        versionNumber = "${version}"
        versionName = "${display_name} - v${mod_version} for Mc ${minecraft_version}"
        versionType = "release" // This is the default -- can also be `beta` or `alpha`
        uploadFile = tasks.jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
        gameVersions = ["${minecraft_version}"] // Must be an array, even with only one version
        loaders = ["forge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
        dependencies { // A special DSL for creating dependencies
            optional.project "kubejs"
            optional.project "jei"
            optional.project "crafttweaker"
            required.project "create"
        }
        changelog = rootProject.file("changes/${minecraft_version}-${mod_version}.md").text
    }
}*/


mixin {
    add sourceSets.main, "${modid}.refmap.json"
}
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

build.dependsOn deobfJar

jar.finalizedBy('reobfJar')

compileJava {
    if (ct_enabled.toBoolean()) {
        options.compilerArgs << "-Acrafttweaker.processor.document.output_directory=${file('docsOut')}"
    }
}

unifiedPublishing {
    project {
        changelog = rootProject.file("changes/${minecraft_version}-${mod_version}.md").text // Optional, in markdown format
        releaseType = "release" // Optional, use "release", "beta" or "alpha"
        gameVersions = ["${minecraft_version}"]
        gameLoaders = ["forge"]

        mainPublication tasks.jar // Declares the publicated jar

        var cfToken = System.getenv("CF_TOKEN")
        if(cfToken != null) {
            curseforge {
                token = cfToken
                id = "${curseforge_id}" // Required, must be a string, ID of CurseForge project
                //id = "661938" // Required, must be a string, ID of CurseForge project
                //gameVersions.addAll "Java 17"
                relations {
                    depends "create"
                    optional "jei"
                    optional "kubejs"
                    optional "kubejs-create"
                    optional "crafttweaker"
                }
            }
        }

        var mrToken = System.getenv("MODRINTH_TOKEN")
        if(mrToken != null) {
            modrinth {
                token = mrToken

                //id = "r018adCw"// Required, must be a string, ID of Modrinth project
                id = "${modrinth_id}"// Required, must be a string, ID of Modrinth project
                relations {
                    depends "create"
                    optional "jei"
                    optional "kubejs"
                    optional "kubejs-create"
                    optional "crafttweaker"
                }
            }
        }
    }
}
